Index: test/normalize_test.rb
===================================================================
--- test/normalize_test.rb	(revision 8484)
+++ test/normalize_test.rb	(working copy)
@@ -2,7 +2,7 @@
 require 'rubygems'
 require 'active_support'
 
-RAILS_ROOT = File.dirname(__FILE__)
+RAILS_ROOT = File.dirname(__FILE__) unless defined? RAILS_ROOT
 require File.dirname(__FILE__) + "/../lib/open_id_authentication"
 
 class NormalizeTest < Test::Unit::TestCase
Index: test/status_test.rb
===================================================================
--- test/status_test.rb	(revision 8484)
+++ test/status_test.rb	(working copy)
@@ -1,6 +1,6 @@
 require 'test/unit'
 
-RAILS_ROOT = File.dirname(__FILE__)
+RAILS_ROOT = File.dirname(__FILE__) unless defined? RAILS_ROOT
 require File.dirname(__FILE__) + "/../lib/open_id_authentication"
 
 class StatusTest < Test::Unit::TestCase
Index: test/open_id_authentication_test.rb
===================================================================
--- test/open_id_authentication_test.rb	(revision 8484)
+++ test/open_id_authentication_test.rb	(working copy)
@@ -7,7 +7,7 @@
 gem 'ruby-openid'
 require 'openid'
 
-RAILS_ROOT = File.dirname(__FILE__)
+RAILS_ROOT = File.dirname(__FILE__) unless defined? RAILS_ROOT
 require File.dirname(__FILE__) + "/../lib/open_id_authentication"
 
 class OpenIdAuthenticationTest < Test::Unit::TestCase
@@ -19,8 +19,10 @@
   end
 
   def test_authentication_should_fail_when_the_identity_server_is_missing
-    @controller.stubs(:open_id_consumer).returns(stub(:begin => stub(:status => OpenID::FAILURE)))
-    
+    open_id_consumer = mock()
+    open_id_consumer.expects(:begin).raises(OpenID::OpenIDError)
+    @controller.stubs(:open_id_consumer).returns(open_id_consumer)
+
     @controller.send(:authenticate_with_open_id, "http://someone.example.com") do |result, identity_url|
       assert result.missing?
       assert_equal "Sorry, the OpenID server couldn't be found", result.message
@@ -28,7 +30,9 @@
   end
 
   def test_authentication_should_fail_when_the_identity_server_times_out
-    @controller.stubs(:open_id_consumer).returns(stub(:begin => Proc.new { raise Timeout::Error, "Identity Server took too long." }))
+    open_id_consumer = mock()
+    open_id_consumer.expects(:begin).raises(Timeout::Error, "Identity Server took too long.")
+    @controller.stubs(:open_id_consumer).returns(open_id_consumer)
 
     @controller.send(:authenticate_with_open_id, "http://someone.example.com") do |result, identity_url|
       assert result.missing?
@@ -37,8 +41,8 @@
   end
 
   def test_authentication_should_begin_when_the_identity_server_is_present
-    @controller.stubs(:open_id_consumer).returns(stub(:begin => stub(:status => OpenID::SUCCESS)))
-    @controller.expects(:begin_open_id_authentication) 
+    @controller.stubs(:open_id_consumer).returns(stub(:begin => true))
+    @controller.expects(:begin_open_id_authentication)
     @controller.send(:authenticate_with_open_id, "http://someone.example.com")
   end
 end
\ No newline at end of file
Index: tasks/open_id_authentication_tasks.rake
===================================================================
--- tasks/open_id_authentication_tasks.rake	(revision 8484)
+++ tasks/open_id_authentication_tasks.rake	(working copy)
@@ -10,7 +10,8 @@
 
     desc "Clear the authentication tables"
     task :clear => :environment do
-      OpenIdAuthentication::DbStore.gc
+      OpenIdAuthentication::DbStore.cleanup_nonces
+      OpenIdAuthentication::DbStore.cleanup_associations
     end
   end
-end
\ No newline at end of file
+end
Index: init.rb
===================================================================
--- init.rb	(revision 8484)
+++ init.rb	(working copy)
@@ -1,5 +1,5 @@
 begin
-  require 'openid'  
+  require 'openid'
 rescue LoadError
   begin
     gem 'ruby-openid'
Index: lib/generators/open_id_authentication_tables/templates/migration.rb
===================================================================
--- lib/generators/open_id_authentication_tables/templates/migration.rb	(revision 8484)
+++ lib/generators/open_id_authentication_tables/templates/migration.rb	(working copy)
@@ -1,28 +1,20 @@
-class AddOpenIdAuthenticationTables < ActiveRecord::Migration
+class <%= class_name %> < ActiveRecord::Migration
   def self.up
-    create_table "open_id_authentication_associations", :force => true do |t|
-      t.column "server_url", :binary
-      t.column "handle", :string
-      t.column "secret", :binary
-      t.column "issued", :integer
-      t.column "lifetime", :integer
-      t.column "assoc_type", :string
+    create_table :open_id_authentication_associations, :force => true do |t|
+      t.integer :issued, :lifetime
+      t.string :handle, :assoc_type
+      t.binary :server_url, :secret
     end
 
-    create_table "open_id_authentication_nonces", :force => true do |t|
-      t.column "nonce", :string
-      t.column "created", :integer
+    create_table :open_id_authentication_nonces, :force => true do |t|
+      t.integer :timestamp, :null => false
+      t.string :server_url, :null => true
+      t.string :salt, :null => false
     end
-
-    create_table "open_id_authentication_settings", :force => true do |t|
-      t.column "setting", :string
-      t.column "value", :binary
-    end
   end
 
   def self.down
-    drop_table "open_id_authentication_associations"
-    drop_table "open_id_authentication_nonces"
-    drop_table "open_id_authentication_settings"
+    drop_table :open_id_authentication_associations
+    drop_table :open_id_authentication_nonces
   end
-end
\ No newline at end of file
+end
Index: lib/generators/open_id_authentication_tables/open_id_authentication_tables_generator.rb
===================================================================
--- lib/generators/open_id_authentication_tables/open_id_authentication_tables_generator.rb	(revision 8484)
+++ lib/generators/open_id_authentication_tables/open_id_authentication_tables_generator.rb	(working copy)
@@ -8,4 +8,4 @@
       m.migration_template 'migration.rb', 'db/migrate'
     end
   end
-end
\ No newline at end of file
+end
Index: lib/open_id_authentication/setting.rb
===================================================================
--- lib/open_id_authentication/setting.rb	(revision 8484)
+++ lib/open_id_authentication/setting.rb	(working copy)
@@ -1,5 +0,0 @@
-module OpenIdAuthentication
-  class Setting < ActiveRecord::Base  
-    set_table_name :open_id_authentication_settings
-  end
-end
\ No newline at end of file
Index: lib/open_id_authentication/db_store.rb
===================================================================
--- lib/open_id_authentication/db_store.rb	(revision 8484)
+++ lib/open_id_authentication/db_store.rb	(working copy)
@@ -1,29 +1,19 @@
+require 'openid/store/interface'
+
 module OpenIdAuthentication
-  class DbStore < OpenID::Store
-    def self.gc
+  class DbStore < OpenID::Store::Interface
+    def self.cleanup_nonces
       now = Time.now.to_i
-
-      # remove old nonces
-      nonces = Nonce.find(:all)
-      nonces.each {|n| n.destroy if now - n.created > 6.hours} unless nonces.nil?
-    
-      # remove expired assocs
-      assocs = Association.find(:all)
-      assocs.each { |a| a.destroy if a.from_record.expired? } unless assocs.nil?
+      Nonce.delete_all(["timestamp > ? OR timestamp < ?", now + OpenID::Nonce.skew, now - OpenID::Nonce.skew])
     end
 
-
-    def get_auth_key
-      unless setting = Setting.find_by_setting('auth_key')
-        auth_key = OpenID::Util.random_string(20)
-        setting  = Setting.create(:setting => 'auth_key', :value => auth_key)
-      end
-
-      setting.value
+    def self.cleanup_associations
+      now = Time.now.to_i
+      Association.delete_all(['issued + lifetime > ?',now])
     end
 
     def store_association(server_url, assoc)
-      remove_association(server_url, assoc.handle)    
+      remove_association(server_url, assoc.handle)
       Association.create(:server_url => server_url,
                          :handle     => assoc.handle,
                          :secret     => assoc.secret,
@@ -32,49 +22,34 @@
                          :assoc_type => assoc.assoc_type)
     end
 
-    def get_association(server_url, handle=nil)
-      assocs = handle.blank? ? 
-        Association.find_all_by_server_url(server_url) :
+    def get_association(server_url, handle = nil)
+      assocs = if handle.blank?
+          Association.find_all_by_server_url(server_url)
+        else
           Association.find_all_by_server_url_and_handle(server_url, handle)
-    
+        end
+
       assocs.reverse.each do |assoc|
-        a = assoc.from_record    
-        if a.expired?
+        a = assoc.from_record
+        if a.expires_in == 0
           assoc.destroy
         else
           return a
         end
       end if assocs.any?
-    
+
       return nil
     end
-  
+
     def remove_association(server_url, handle)
-      assoc = Association.find_by_server_url_and_handle(server_url, handle)
-      unless assoc.nil?
-        assoc.destroy
-        return true
-      end
-      false
+      Association.delete_all(['server_url = ? AND handle = ?', server_url, handle]) > 0
     end
-  
-    def store_nonce(nonce)
-      use_nonce(nonce)
-      Nonce.create :nonce => nonce, :created => Time.now.to_i
-    end
-  
-    def use_nonce(nonce)
-      nonce = Nonce.find_by_nonce(nonce)
-      return false if nonce.nil?
-    
-      age = Time.now.to_i - nonce.created
-      nonce.destroy
 
-      age < 6.hours # max nonce age of 6 hours
+    def use_nonce(server_url, timestamp, salt)
+      return false if Nonce.find_by_server_url_and_timestamp_and_salt(server_url, timestamp, salt)
+      return false if (timestamp - Time.now.to_i).abs > OpenID::Nonce.skew
+      Nonce.create(:server_url => server_url, :timestamp => timestamp, :salt => salt)
+      return true
     end
-  
-    def dumb?
-      false
-    end
   end
-end
\ No newline at end of file
+end
Index: lib/open_id_authentication/nonce.rb
===================================================================
--- lib/open_id_authentication/nonce.rb	(revision 8484)
+++ lib/open_id_authentication/nonce.rb	(working copy)
@@ -2,4 +2,4 @@
   class Nonce < ActiveRecord::Base
     set_table_name :open_id_authentication_nonces
   end
-end
\ No newline at end of file
+end
Index: lib/open_id_authentication/association.rb
===================================================================
--- lib/open_id_authentication/association.rb	(revision 8484)
+++ lib/open_id_authentication/association.rb	(working copy)
@@ -6,4 +6,4 @@
       OpenID::Association.new(handle, secret, issued, lifetime, assoc_type)
     end
   end
-end
\ No newline at end of file
+end
Index: lib/open_id_authentication.rb
===================================================================
--- lib/open_id_authentication.rb	(revision 8484)
+++ lib/open_id_authentication.rb	(working copy)
@@ -1,16 +1,19 @@
+require 'uri'
+require 'openid/extensions/sreg'
+
 module OpenIdAuthentication
   OPEN_ID_AUTHENTICATION_DIR = RAILS_ROOT + "/tmp/openids"
-  
+
   def self.store
     @@store
   end
-  
+
   def self.store=(value)
     @@store = value
   end
-  
+
   self.store = :db
-  
+
   def store
     OpenIdAuthentication.store
   end
@@ -20,19 +23,20 @@
 
   class Result
     ERROR_MESSAGES = {
-      :missing    => "Sorry, the OpenID server couldn't be found",
-      :canceled   => "OpenID verification was canceled",
-      :failed     => "Sorry, the OpenID verification failed"
+      :missing      => "Sorry, the OpenID server couldn't be found",
+      :canceled     => "OpenID verification was canceled",
+      :failed       => "Sorry, the OpenID verification failed",
+      :setup_needed => "OpenID verification needs setup"
     }
-    
+
     def self.[](code)
       new(code)
     end
-    
+
     def initialize(code)
       @code = code
     end
-    
+
     def ===(code)
       if code == :unsuccessful && unsuccessful?
         true
@@ -40,7 +44,7 @@
         @code == code
       end
     end
-    
+
     ERROR_MESSAGES.keys.each { |state| define_method("#{state}?") { @code == state } }
 
     def successful?
@@ -50,7 +54,7 @@
     def unsuccessful?
       ERROR_MESSAGES.keys.include?(@code)
     end
-    
+
     def message
       ERROR_MESSAGES[@code]
     end
@@ -67,7 +71,6 @@
     end
   end
 
-
   protected
     def normalize_url(url)
       OpenIdAuthentication.normalize_url(url)
@@ -87,61 +90,61 @@
       end
     end
 
-
   private
     def begin_open_id_authentication(identity_url, fields = {})
-      open_id_response = timeout_protection_from_identity_server { open_id_consumer.begin(identity_url) }
+      open_id_request = open_id_consumer.begin(identity_url)
+      add_simple_registration_fields(open_id_request, fields)
+      redirect_to(open_id_redirect_url(open_id_request))
+    rescue OpenID::OpenIDError, Timeout::Error
+      yield Result[:missing], identity_url, nil
+    end
 
-      case open_id_response.status
-      when OpenID::FAILURE
-        yield Result[:missing], identity_url, nil
-      when OpenID::SUCCESS
-        add_simple_registration_fields(open_id_response, fields)
-        redirect_to(open_id_redirect_url(open_id_response))
-      end
-    end
-  
     def complete_open_id_authentication
-      open_id_response = timeout_protection_from_identity_server { open_id_consumer.complete(params) }
-      identity_url     = normalize_url(open_id_response.identity_url) if open_id_response.identity_url
+      params_with_path = params.reject{ |key, value| request.path_parameters[key] }
+      open_id_response = timeout_protection_from_identity_server { open_id_consumer.complete(params_with_path, requested_url) }
+      identity_url     = normalize_url(open_id_response.endpoint.claimed_id) if open_id_response.endpoint.claimed_id
 
       case open_id_response.status
-      when OpenID::CANCEL
+      when OpenID::Consumer::SUCCESS
+        yield Result[:successful], identity_url, OpenID::SReg::Response.from_success_response(open_id_response)
+      when OpenID::Consumer::CANCEL
         yield Result[:canceled], identity_url, nil
-      when OpenID::FAILURE
-        logger.info "OpenID authentication failed: #{open_id_response.msg}"
+      when OpenID::Consumer::FAILURE
         yield Result[:failed], identity_url, nil
-      when OpenID::SUCCESS
-        yield Result[:successful], identity_url, open_id_response.extension_response('sreg')
-      end      
+      when OpenID::Consumer::SETUP_NEEDED
+        yield Result[:setup_needed], open_id_response.setup_url, nil
+      end
     end
 
     def open_id_consumer
       OpenID::Consumer.new(session, open_id_store)
     end
-    
+
     def open_id_store
       case store
       when :db
         OpenIdAuthentication::DbStore.new
       when :file
-        OpenID::FilesystemStore.new(OPEN_ID_AUTHENTICATION_DIR)
+        OpenID::Store::Filesystem.new.new(OPEN_ID_AUTHENTICATION_DIR)
       else
         raise "Unknown store: #{store}"
       end
     end
 
+    def add_simple_registration_fields(open_id_request, fields)
+      sreg_request = OpenID::SReg::Request.new
+      sreg_request.request_fields(Array(fields[:required]).map(&:to_s), true) if fields[:required]
+      sreg_request.request_fields(Array(fields[:optional]).map(&:to_s), false) if fields[:optional]
+      open_id_request.add_extension(sreg_request)
+    end
 
-    def add_simple_registration_fields(open_id_response, fields)
-      open_id_response.add_extension_arg('sreg', 'required', [ fields[:required] ].flatten * ',') if fields[:required]
-      open_id_response.add_extension_arg('sreg', 'optional', [ fields[:optional] ].flatten * ',') if fields[:optional]
+    def open_id_redirect_url(open_id_request)
+      open_id_request.return_to_args['open_id_complete'] = '1'
+      open_id_request.redirect_url(request.protocol + request.host_with_port + "/", requested_url)
     end
-    
-    def open_id_redirect_url(open_id_response)
-      open_id_response.redirect_url(
-        request.protocol + request.host_with_port + "/",
-        open_id_response.return_to("#{request.protocol + request.host_with_port + request.relative_url_root + request.path}?open_id_complete=1")
-      )     
+
+    def requested_url
+      "#{request.protocol + request.host_with_port + request.relative_url_root + request.path}"
     end
 
     def timeout_protection_from_identity_server
@@ -151,7 +154,7 @@
         def status
           OpenID::FAILURE
         end
-        
+
         def msg
           "Identity server timed out"
         end
